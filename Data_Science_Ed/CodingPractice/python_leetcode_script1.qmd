```{python}
#Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid -- Open brackets must be closed by the same type of brackets in the correct order.
#such as ()[]{}( and {}(]()
#oop
class Solution:
    def isValid(self, s: str) -> bool:
      
        # If the length of the string is odd, there must be a leftover without a match
        if len(s) % 2 == 1:
            return False

        # Define the pairs of closing and opening brackets
        # The order is closing bracket, matching opening bracket
        # Once a closing bracket is encountered, search backward for its matching opening bracket
        #"({]"
        #"(){}"
        #"]"
        pairs = {
            ")": "(",
            "]": "[",
            "}": "{",
        }

        stack = list()

        for ch in s:
            # If the character is a closing bracket
            if ch in pairs:
                # If the stack is empty or the last element in the stack does not match the corresponding opening bracket
                if not stack or stack[-1] != pairs[ch]:
                    # It's a mismatch or the first bracket (stack is empty, so need to store the first one)
                    return False

                # If the closing bracket matches the corresponding opening bracket, remove the last element from the stack
                stack.pop()
            else:
                # If the character is an opening bracket, store it in the stack
                stack.append(ch)

        # If the stack is empty, the brackets are valid
        return not stack
        # If the stack is not empty, there are unmatched opening brackets, so return False
        # If the stack is empty, return True, indicating valid bracket pairs

```

```{python}
# Create an instance of the Solution class
instance = Solution()

# Call the isValid method on the instance
instance.isValid("(]")

instance.isValid("()[]{}")

```
