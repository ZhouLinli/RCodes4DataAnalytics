---
title: "Core Course Review (2018 Fall-2022 Spring)"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r load.df.funs, include=FALSE}
#load all necessary packages and themes, global optin chunk
source("/Users/linlizhou/Documents/Rprojects/IR-Projects/theme_source.R")

#change format: html (for render in Viewer) 
#to the following for the word doc. version report
#format: 
#  docx:
#    reference-doc: /Users/linlizhou/Documents/Rprojects/lasell.report.IN-USE.docx
#    prefer-html: true

#the following df are created from "/Users/linlizhou/Documents/Rprojects/IR-Projects/theme_source.R" 
#enrollment of core courses
sectiontally<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/Section Tally_1822core.xls")
#grades of core courses: unique id's background
stucrs.id<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/StudentInfoCourse_1822core_dedupid.xlsx")
#grades of core courses:
stucrs<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/StudentInfoCourse_1822core.xlsx")
#2018 cohort's core courses
corepath.ls<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/path_df_18cohort.xlsx")


#reporting-goal/items
#DONE-For each term (fall/spring): # courses/ sections offered in each core segment – SECTION TALLY
#DONE-For each term (fall/spring): # registration in each core segment – SECTION TALLY
#DONE- % of pass, C or better, and Withdrawal; Average GPA (and SD) of each courses – STU INFO BY COURSE
#DONE-All core course enrollment and transfer proportion – deduplicated student count in STU INFO BY COURSE
#DONE/HIDE-All core course retention – STARFISH RETENTION REPORT
#DONE-Satisfaction – 2018-2022 4 years of satisfaction prt in that one question containing "core"
#DONE-course-taking sequence – 2018 COHORT BY GRADUATION IN 2022 OR NOT – POWERCAMPUS TRANSCRIPT

#define conditional formatting
cf<-function(x,a=20,b=10,
             col1=color_yellow,col2=color_yellowlight,col3="white"
             #col1=color_grey,col2=color_greylight,col3="white"
             ){
    if_else(x>a,col1,#if value>20, then use color1
            if_else(x>b,col2,#if 20>value>10, then use color2
                    col3))}#if value<=10, then use color3

#define column conditional format: n-th column, white text, background condfmt
#col_cf<-function(i=1,kbl=static_tab.sec,df=tab.sec){column_spec(
 # kable_input=kbl,column=i,color = "white",background =cf(df[i]))}
```

# Sections offered

```{r tab.sec}
#vars needed: coursecode, CourseGroup
#For each term (fall/spring): # courses/ sections offered in each core segment -- SECTION TALLY

#number of total section offered
#sectiontally%>%group_by(CourseGroup)%>%summarise(section_n=n())

#number of term section offered
tab.sec<-sectiontally%>%group_by(CourseGroup,term)%>%
  summarise(section_n=n())%>%
  mutate(Total=sum(section_n))%>%
  pivot_wider(names_from = term, values_from = section_n)%>%
  select(CourseGroup,Total,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)
```

```{r static_tab.sec}
#show the table
static_tab.sec<-tab.sec%>%#adorn_totals()%>%#add total row this won't saved in df
kbl(label="tab.sec",#in-text reference
    caption = "Core course section offered each term", #table title
    col.names =c("",names(tab.sec)[2:ncol(tab.sec)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                #the same as: kable_material(c("striped", "hover")) 
                #less than 3 row then use: kable_minimal()
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#failed attempt set total row's condfmt based on row value: mutate(across(1:ncol(tab.sec2),~cell_spec(.x,color=ifelse(CourseGroup=="Total"&.x>100,"blue","white"))))

#set total col#col1 =color_yellowdark,col2=color_yellowlight,col3="white"
column_spec(2, color="black",background =cf(x=tab.sec[2],a=169,b=148))%>%
#set total row:row_spec(nrow(tab.sec)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")
#optional tolltip: popover = paste("am:", tab.sec$`2018 Fall`)
#%>%footnote("")#ncol(tab.sec)
#inctead of kbl; can use gt::gt()%>%tab_header(title = "How many core course sections are offered each term?")

#apply cf to multi columns
for (i in 3:ncol(tab.sec)){
static_tab.sec<-column_spec(
  kable_input=static_tab.sec,
  column=i,background =cf(tab.sec[i],a=29,b=25))
i=i+1
static_tab.sec}
```

```{r interactive_tab.sec}
#interactive table
interactive_tab.sec<-datatable(
  #which table to show
  data = tab.sec,
  #table show in compact format
  class = "compact",#display
  #set table's font family
  options = list(initComplete = JS("function(settings, json) {",
        "$('body').css({'font-family': 'Georgia'});","}")),
  #set header font size: "$(this.api().table().header()).css({'font-size': '50%'});"
  #set table caption
  caption = "Core course section offered each term",
  #column/header names
  colnames =c("",names(tab.sec)[2:ncol(tab.sec)]),
  #place filter at the top
  filter = "top")#%>%DT::formatStyle(columns = colnames(tab.sec), fontSize = '50%')
```

```{r plot.sec}
#found that this is not necessary; just add a total row in the table with conditional formatting would work
plot.sec<-sectiontally%>%group_by(term,CourseGroup)%>%summarise(section_n=n())%>%
  mutate(term_cnt=sum(section_n))%>%#mutate(prt=term_cnt/sum(term_cnt))%>%
  select(term,term_cnt)%>%unique()%>%
  mutate(term_cnt_group=if_else(term_cnt>169,"high",
          if_else(term_cnt>148,"medium","low")))%>%
  
  ggplot(aes(x=factor(term, levels = c("2018 Fall","2019 Spring","2019 Fall","2020 Spring","2020 Fall","2021 Spring","2021 Fall","2022 Spring")),
             y=term_cnt,fill=term_cnt_group))+
  
  geom_bar(stat = "identity")+
  scale_fill_manual(values = c(color_yellowdark,color_greylight,color_grey))+
  geom_text(aes(label=term_cnt),size=3,vjust=0.5, hjust=0.7, fontface="bold")+
  labs(title="Total number of core course sections each term",x="",y="")+
  theme_lz()+theme(axis.text.x = element_text(),legend.position = "none")
```

```{r}
tab.sec%>%pivot_longer(cols = `2018 Fall`:`2022 Spring`,names_to = "term",values_to = "#section")%>%
ggplot(aes(x=term,y=`#section`,fill=CourseGroup))
```

```{r showviz.sec, include=TRUE}
static_tab.sec
#interactive_tab.sec
#plot.sec
```

# Enrollments

```{r tab.reg}
#vars needed: Current_Enrollment
# For each term (fall/spring): # registration in each core segment -- SECTION TALLY 
tab.reg<-sectiontally%>%group_by(CourseGroup,term)%>%summarise(enrollment=sum(Current_Enrollment))%>%mutate(Total=sum(enrollment))%>%
  mutate(prt=formattable::percent(enrollment/Total,digit=0))%>%select(-enrollment)%>%
  pivot_wider(names_from = term, values_from = prt)%>%
  #reorder cols
  select(CourseGroup,Total,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)#%>%View()
```

```{r static_tab.reg}
#show the table
static_tab.reg<-tab.reg%>%#adorn_totals()%>%add total row this won't saved in df
kbl(label="tab.reg",#in-text reference
    caption = "Core course enrollment each term", #table title
    col.names =c("",names(tab.reg)[2:ncol(tab.reg)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                #the same as: kable_material(c("striped", "hover")) 
                #less than 3 row then use: kable_minimal()
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set total col:,col1 =color_yellowdark,col2=color_yellowlight,col3="white"
column_spec(2, color="black",background =cf(x=tab.reg[2],a=3000,b=2500))%>%
#set total row: row_spec(nrow(tab.reg)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 3:ncol(tab.reg)){
static_tab.reg<-column_spec(
  kable_input=static_tab.reg,
  column=i,background =cf(tab.reg[i],a=0.2,b=0.155))
i=i+1
static_tab.reg}
```

```{r showviz.reg, include=TRUE}
static_tab.reg
```

## Un-duplicated Headcount

```{r tab.stu-deduplicated student count by term}
tab.stu<-stucrs%>%group_by(term)%>%summarise(n=n_distinct(people_code_id))%>%
#%>%select(n)%>%colSums(n)#10549 ppid adding separate terms together
  pivot_wider(names_from = term,values_from = n)%>%
  mutate(Term="Unduplicated Headcount")

names(tab.stu)<-names(tab.stu)%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")

tab.stu<-tab.stu%>%
  select(Term,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)#%>%View()
```

```{r static_tab.stu}
static_tab.stu<-tab.stu%>%
kbl(label="tab.stu",#in-text reference
    caption = "Student headcount each term", #table title
    col.names =c("",names(tab.stu)[2:ncol(tab.stu)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set total col: column_spec(2, color="black",background =cf(x=tab.reg[2],a=3000,b=2500,col1 =color_yellowdark,col2=color_yellowlight,col3="white"))%>%
#set total row: row_spec(nrow(tab.reg)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "10em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.stu)){
static_tab.stu<-column_spec(
  kable_input=static_tab.stu,
  column=i,background =cf(tab.stu[i],a=1400,b=1300))
i=i+1
static_tab.stu}
```

```{r tab.stutrans}
#transfer status percent
tab.stutrans<-stucrs.id%>%group_by(term,transfer)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(transfer=="Y")%>%select(term,prt)

#combine with tab.stu
tab.stutrans<-stucrs%>%group_by(term)%>%summarise(n=n_distinct(people_code_id))%>%
  mutate(tab.stutrans)

#rename terms
tab.stutrans$term<-tab.stutrans$term%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")

colnames(tab.stutrans)<-c("Term","Headcount","Transfer")
```

```{r static_tab.stutrans}
static_tab.stutrans<-tab.stutrans%>%
kable(label="tab.stutrans",#in-text reference
    caption = "Student headcounts and percentage of transfer students", #table title
    col.names =c("",names(tab.stutrans)[2:ncol(tab.stutrans)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set total col: column_spec(2, color="black",background =cf(x=tab.reg[2],a=3000,b=2500,col1 =color_yellowdark,col2=color_yellowlight,col3="white"))%>%
#set total row: row_spec(nrow(tab.reg)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
column_spec(1, border_right = F, background = "white", width = "8em",color="black")%>%
#cond formatting using different rules
column_spec(2,color = "balck",background =cf(tab.stutrans[2],a=1400,b=1300))%>%
column_spec(3,color = "black",background =cf(tab.stutrans[3],a=0.3,b=0.195))
```

```{r showviz.stu, include=TRUE}
static_tab.stutrans
```

```{r hideretention}
fa18<-stucrs.id%>%filter(term=="2018 FALL")
sp19<-stucrs.id%>%filter(term=="2019 SPRING")
fa19<-stucrs.id%>%filter(term=="2019 FALL")
sp20<-stucrs.id%>%filter(term=="2020 SPRING")
fa20<-stucrs.id%>%filter(term=="2020 FALL")
sp21<-stucrs.id%>%filter(term=="2021 SPRING")
fa21<-stucrs.id%>%filter(term=="2021 FALL")
sp22<-stucrs.id%>%filter(term=="2022 SPRING")

#term to term retention
ret18fa<-summary(fa18$people_code_id%in%sp19$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret19sp<-summary(sp19$people_code_id%in%fa19$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret19fa<-summary(fa19$people_code_id%in%sp20$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret20sp<-summary(sp20$people_code_id%in%fa20$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret20fa<-summary(fa20$people_code_id%in%sp21$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret21sp<-summary(sp21$people_code_id%in%fa21$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret21fa<-summary(fa21$people_code_id%in%sp22$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

#attach together
tibble(term=c("2018 FALL","2019 SPRING","2019 FALL","2020 SPRING","2020 FALL","2021 SPRING","2021 FALL"),
       retention=c(ret18fa,ret19sp,ret19fa,ret20sp,ret20fa,ret21sp,ret21fa))%>%
  mutate(retention=formattable::percent(retention,digits = 0))%>%
  pivot_wider(names_from = term, values_from = retention)#%>%View()
```

# Student Grades

```{r explore C/Pass/Withdraw}
# % of C or better (A, A-, B+, B, B-, C+, C or P)
# % of pass (not F or W) for each segment
# % of Withdrawal (W)

#grade by term: hide
stucrs%>%group_by(term,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  select(-cnt)%>%pivot_wider(names_from = term,values_from = prt)#%>%View()

# by segment/coursegroup

##figuring out how to order vars in group by:
#stucrs%>%filter(term=="2018 FALL")%>%
#  group_by(CourseGroup,grade)%>%summarise(cnt=n())%>%
#  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
#  select(-cnt)%>%pivot_wider(names_from = grade,values_from = prt)#%>%View()

##grade for each coursegroup by term: too many grades
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  select(-cnt)%>%pivot_wider(names_from = term,values_from = prt)#%>%View()

#C or better by coursegroup
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(grade%in%c("C or better"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = `C or better`)#%>%View()


```

```{r tab.passwithdraw}
#pass: c or better + D -- worth reporting
tab.pass<-stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  replace(is.na(.), 0)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()

names(tab.pass)<-names(tab.pass)%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")

tab.pass<-tab.pass%>%select(CourseGroup,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)


#withdrawl by coursegroup -- worth reporting
tab.withdraw<-stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade=="W")%>%
  select(-cnt,-grade)%>%pivot_wider(names_from = term,values_from = prt,values_fill = 0)%>%
mutate(across(`2018 FALL`:`2022 SPRING`, function(x) percent(x, digit=0)))

names(tab.withdraw)<-names(tab.withdraw)%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")
  
tab.withdraw<-tab.withdraw%>%select(CourseGroup,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)
```

```{r static_tab.passwithdraw}
static_tab.pass<-tab.pass%>%
kbl(label="tab.pass",#in-text reference
    caption = "Core course pass rates", #table title
    col.names =c("",names(tab.pass)[2:ncol(tab.pass)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.pass)){
static_tab.pass<-column_spec(
  kable_input=static_tab.pass,
  column=i,color = "black",background =cf(tab.pass[i],a=.89,b=.8,col1 = "white",col2 = color_greylight,col3=color_grey))
i=i+1
static_tab.pass}

#a=quantile(tab.pass[i],prob=.75),b=median(tab.pass[i])

static_tab.withdraw<-tab.withdraw%>%
kbl(label="tab.withdraw",#in-text reference
    caption = "Core course withdraw rates", #table title
    col.names =c("",names(tab.withdraw)[2:ncol(tab.withdraw)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.withdraw)){
static_tab.withdraw<-column_spec(
  kable_input=static_tab.withdraw,
  column=i,color = "black",background =cf(tab.withdraw[i],a=.10,b=.055,col1 = color_grey,col2 = color_greylight,col3="white"))
i=i+1
static_tab.withdraw}
```

```{r tab.gpa}
# explore Average GPA (and SD): hide
stucrs%>%group_by(term)%>%summarise(mn=round(mean(GPA,na.rm=T),digits = 2),
                                          sd=round(sd(GPA,na.rm=T),digits = 2))#%>%View()#tanspose when paste

#GPA by segment/coursegroup: worth reporting -- actually the same as %pass
tab.gpa<-stucrs%>%group_by(term,CourseGroup)%>%summarise(mn=round(mean(GPA,na.rm=T),digits = 2))%>%
  pivot_wider(names_from = term,values_from = mn)#%>%View()
```

```{r static_tab.gpa}
static_tab.gpa<-tab.gpa%>%
kbl(label="tab.gpa",#in-text reference
    caption = "Core course GPA mean", #table title
    col.names =c("",names(tab.gpa)[2:ncol(tab.gpa)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.gpa)){
static_tab.gpa<-column_spec(
  kable_input=static_tab.gpa,
  column=i,color = "white",background =cf(tab.gpa[i],a=3.5,b=3.0))
i=i+1
static_tab.gpa}
```

```{r showviz.passwithdraw, include=TRUE}
static_tab.pass
static_tab.withdraw
#static_tab.gpa-- actually the same as %pass
```

```{r hideFYS}
#In grade table, FYS in spring and SciInq in fall has weried pattern of being sig. lower. To investigate what are the most at-risk courses: 
#lay out all FYS/SciInq courses by term (fall vs spring) w/t % pass

#stucrs%>%count(CourseGroup)
#FYS: not worth showing; only fys and 100% honors course
stucrs%>%filter(CourseGroup%in%c("FYS"))%>%
  group_by(term,coursecode,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  replace(is.na(.), 0)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
 mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)

```

## Scientific Inquiry

```{r tab.sci}
#explore which courses SciInq caused low pass rate in 19fall and 21fall
stucrs%>%filter(CourseGroup%in%c("Scientific Inquiry & Problem Solving"),
                term%in%c("2019 FALL","2021 FALL"))%>%
  group_by(term,coursecode,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  filter(pass<0.8)%>%#it's BIO101 and CHEM203
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()

tab.sci<-stucrs%>%filter(CourseGroup%in%c("Scientific Inquiry & Problem Solving"),
                coursecode%in%c("BIO101","CHEM203"))%>%
  group_by(term,coursecode,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()

names(tab.sci)<-names(tab.sci)%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")

#tab.sci<-tab.sci%>%select(CourseGroup,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)
```

```{r static_tab.sci}
static_tab.sci<-tab.sci%>%
kbl(label="tab.sci",#in-text reference
    caption = "Pass rates of seleted scientific inquiry courses", #table title
    col.names =c("",names(tab.sci)[2:ncol(tab.sci)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.sci)){
static_tab.sci<-column_spec(
  kable_input=static_tab.sci,
  column=i,color = "black",background =cf(tab.sci[i],a=.7,b=.6,col3 = color_grey,col2 = color_greylight,col1="white"))
i=i+1
static_tab.sci}
```

```{r showviz.sci, include=TRUE}
static_tab.sci
```

# Enrollment Path

```{r report prt of term for coursegroup}
#OVERALL - each coursegroup, prt of each term
corepath.ls%>%group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  
#graduated vs not graduated students
#graduated
corepath.ls%>%filter(matric=="Graduated")%>%
  group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  
#not graduated
corepath.ls%>%filter(matric=="Not Graduate")%>%
  group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  
#AFTER COPY PASTE IN EXCEL: 1. I calculated the difference between grad vs not graduated - hilight high prt to show popular terms for each courses. 2. Used conditional formmatting for difference>0.1 or <-0.1 
# in the path itself: I removed anything after the first course (i.e., for 1,2,3 meaning student aking the course in the 1st, 2nd, and 3rd semester, I only keep the 1st semester -- due to the definition of core course is the first course that student take in that course category)
```
